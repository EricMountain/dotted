#!/usr/bin/zsh

# Todo:
# ls hyperlinks

# OS detection ################################################################
if grep -q 'NAME="Ubuntu"' /etc/os-release 2>/dev/null; then
    OS_CLASS=Linux
    OS_DIST=Ubuntu
elif grep -q 'NAME="Arch Linux"' /etc/os-release 2>/dev/null; then
    OS_CLASS=Linux
    OS_DIST=ArchLinux
elif grep -q 'NAME="Fedora Linux"' /etc/os-release 2>/dev/null; then
    OS_CLASS=Linux
    OS_DIST=Fedora
elif [ "$(uname)" = "Darwin" ]; then
    OS_CLASS=Darwin
    OS_DIST=Apple
else
    echo Unknown OS/distribution.
    exit 1
fi

case ${OS_CLASS} in
Linux)
    FONT_DIR=~/.local/share/fonts
    ;;
Darwin)
    if [ "$(uname -m)" = "x86_64" ]; then
        brew_prefix=/usr/local
    else
        brew_prefix=/opt/homebrew
    fi
    FONT_DIR=~/Library/Fonts
    # Make brew-installed take precedence over system binaries
    export PATH="${brew_prefix}/bin:${brew_prefix}/sbin:${PATH?}"
    export PATH="${brew_prefix}/opt/coreutils/libexec/gnubin:${PATH}"
    for x in ${brew_prefix}/opt/gnu-* ${brew_prefix}/opt/make  ${brew_prefix}/opt/grep; do
        export PATH="${x}/libexec/gnubin:${PATH}"
    done
    # PyEnv
    eval "$(pyenv init -)"
    eval "$(pyenv init --path)"
    # Load ruby shims (need to install rbenv)
    #eval "$(rbenv init -)"
    ;;
esac

[[ -d ${FONT_DIR} ]] || mkdir -p ${FONT_DIR}

# Specific pre-stuff #######################################################
if [ -d ~/.local-config.d ]; then
    setopt -o null_glob
    for x in $(find ~/.local-config.d -name \*.zsh); do
        source $x
    done
    setopt +o null_glob
fi

# bash #####################################################################
. ~/.bashrc

# RVM ######################################################################
# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# Load Awesome fonts codepoint mappings ####################################
setopt -o null_glob
for x in $(find ${FONT_DIR} -name \*.sh); do
    source $x
done
setopt +o null_glob

FONT_DIR=

# Key remapping on Mac #####################################################

# Right-Command (e7) --> Delete (4c)
# Caps-Lock (39) --> Escape (29)
# See key table: https://developer.apple.com/library/archive/technotes/tn2450/_index.html

if [ "${OS_DIST}" = "Apple" ]; then
    hidutil property --set '{"UserKeyMapping":
        [{"HIDKeyboardModifierMappingSrc":0x7000000e7,
          "HIDKeyboardModifierMappingDst":0x70000004c}]
    }' >/dev/null
fi

# No longer need Escape key remapping? Except on the old Intel Mac?
# ,
#          {"HIDKeyboardModifierMappingSrc":0x700000039,
#           "HIDKeyboardModifierMappingDst":0x700000029}

# Bats test framework ######################################################
if [ "${OS_DIST}" = "Apple" ]; then
    export BATS_LIB_PATH=/opt/homebrew/lib
fi

# direnv ###################################################################
if type direnv >/dev/null 2>&1; then
    eval "$(direnv hook zsh)"
fi

# Oh-my-zsh ################################################################

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

source ~/.p10k.zsh

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# Not used:
# - history-substring-search: fzf is better
# - gpg-agent: causes locale errors on shell startup, also maybe not needed
plugins=(git encode64 docker vscode zsh-syntax-highlighting zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

# Shell history management
export HISTFILESIZE=1000000000
export HISTSIZE=1000000000
export SAVEHIST=1000000000
export HISTFILE=~/.zsh_history
setopt HIST_FIND_NO_DUPS
setopt inc_append_history
setopt share_history

# Fix some oh-my-zsh silliness
export LESS=-FRX
alias ls='ls --color=auto -G'

# alias overrides ##########################################################
alias gl='git pull --ff-only'
alias gpo='git push -u origin "$(git_current_branch)"'

# Fuzzy filtering ##########################################################
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# ranger ###################################################################
# From https://gist.github.com/android10/3a061b3a85ad9fd6832ae25efc4381b0
# Ctrl-O opens zsh at the current location, and on exit, cd into ranger's last location.
ranger-cd() {
    tempfile=$(mktemp)
    ranger --choosedir="$tempfile" "${@:-$(pwd)}" <$TTY
    test -f "$tempfile" &&
        if [ "$(cat -- "$tempfile")" != "$(echo -n $(pwd))" ]; then
            cd -- "$(cat "$tempfile")"
        fi
    rm -f -- "$tempfile"
    # hacky way of transferring over previous command and updating the screen
    VISUAL=true zle edit-command-line
}
zle -N ranger-cd
bindkey '^o' ranger-cd

# VSCode ###################################################################
vscode-current-directory() {
    if which code-insiders >/dev/null 2>&1; then
        code-insiders .
    else
        code .
    fi
}
zle -N vscode-current-directory
bindkey '^v' vscode-current-directory

# Completion ###############################################################
for x in kubectl ddtool; do
    if type $x &>/dev/null && $x completion zsh >$TMPDIR/zsh_completion_$$.sh 2>/dev/null; then
        source $TMPDIR/zsh_completion_$$.sh
        rm $TMPDIR/zsh_completion_$$.sh
    fi
done

# Kube Config ##############################################################

# Contexts stored in ~/.kube/config serve as a template
if [ ! -e ~/.kube/config ]; then
    mkdir ~/.kube
    touch ~/.kube/config
fi

# Don't touch existing config in case we're re-sourcing
if [ -z "${KUBECONFIG}" ]; then
    export KUBECONFIG="$(mktemp ${TMPDIR}/.kube.XXXXXXXXX)"
    cat ~/.kube/config >>${KUBECONFIG}
fi

kubeconfig-zshexit-hook() {
    if [[ "${KUBECONFIG}" != $HOME/.kube/kind-config-kind && ! "${KUBECONFIG}" =~ "${HOME}/protected/.*" ]]; then
        rm -f ${KUBECONFIG}
    fi
}
zshexit_functions+=(kubeconfig-zshexit-hook)

alias kzap='truncate -s 0 ${KUBECONFIG} && cat ~/.kube/config >> ${KUBECONFIG}'
alias kind-env='kind get kubeconfig >! ${KUBECONFIG} ; kubectl cluster-info'

if ! type kgo &>/dev/null; then
    kgo() {
        if kubectl config use-context ${1} 2>/dev/null; then
            if [ -n "${2}" ]; then
                kubectl config set-context $(kubectl config current-context) --namespace=${2}
            fi
        fi
    }
fi

# Go projects ##############################################################
if [ -d ~/dev/go ]; then
    setopt -o null_glob
    for x in $(find ~/dev/go -maxdepth 2 -name \*.rc); do
        source $x
        if [ -n "$GOPATH" ]; then
            echo WARNING: GOPATH has been set by $x, script needs fixing.
            export GOPATH=
        fi
    done
    setopt +o null_glob
fi

# GPG ######################################################################
# Required for pin entry
export GPG_TTY=$(tty)

# Aliases that override Oh-my-zsh and Co ###################################
alias g='goland .'

# Docker ####################################################################
[ -f $HOME/.docker/init-zsh.sh ] && source $HOME/.docker/init-zsh.sh

# Clear last error
true
