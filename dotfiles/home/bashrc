#!/bin/bash -*- mode: sh -*-
#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

PS1='[\u@\h \W]\$ '

[[ -d ~/.profile.d ]] && for x in ~/.profile.d/*.sh; do source $x; done

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups

# append to the history file, don't overwrite it
[ -z "$ZSH_NAME" ] && shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
[ -z "$ZSH_NAME" ] && shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm* | rxvt*)
        PS1="\[\e]0;\u@\h: \w\a\]$PS1"
    ;;
    *) ;;
esac

# enable color support of ls and also add handy aliases
if type dircolors > /dev/null 2>&1 ; then
    eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# libvirt needs a more relaxed umask, 0002, however not using that currently so let's be more secure instead
# Base setting on Linux is through pam_umask + /etc/login.defs
umask 0077

export EDITOR=vim

[[ -z "$TMPDIR" ]] && export TMPDIR="/tmp/$USER"
[[ ! -d "$TMPDIR" ]] && mkdir -m 700 "$TMPDIR" && export TMPDIR="/tmp/$USER"

if [ -z "$ZSH_NAME" ]; then
    # Git prompt configuration

    function source_git_prompt() {
        local bashrc_dir=$(dirname $(readlink -f ${BASH_SOURCE[0]}))

        if [[ -f $bashrc_dir/git-prompt.sh ]]; then
            source $bashrc_dir/git-prompt.sh
        else
            source /usr/share/git/completion/git-prompt.sh
        fi
    }

    source_git_prompt

    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1
    export GIT_PS1_SHOWUPSTREAM="auto verbose name"
    export GIT_PS1_SHOWCOLORHINTS=1

    # Python virtualenv prompt configuration
    # Based on http://stackoverflow.com/a/20026992/3023502
    export VIRTUAL_ENV_DISABLE_PROMPT=1

    function python_virtualenv() {
        if [[ -n "$VIRTUAL_ENV" ]]; then
            # Strip out the path and just leave the env name
            echo "(${VIRTUAL_ENV##*/})"
        fi
    }

    # Timestamp to calculate command duration
    PS0='$(touch $TMPDIR/.bash.cmd.start.pid.$$)'

    set_prompt() {
        Last_Command=$? # Must come first!

        starttime=$(stat --format="%Y" $TMPDIR/.bash.cmd.start.pid.$$ 2>/dev/null)
        if [[ -n $starttime ]]; then
            duration=$(date "+%s" -d "now -$starttime seconds")
            rm $TMPDIR/.bash.cmd.start.pid.$$
        else
            duration=
        fi

        Blue='\e[01;34m'
        White='\e[01;37m'
        Red='\e[01;31m'
        Green='\e[01;32m'
        Yellow='\e[01;33m'
        Magenta='\e[01;35m'
        Cyan='\e[01;36m'
        Reset='\e[00m'
        FancyX='\342\234\227'
        Checkmark='\342\234\223'

        prompt=""
        # If last command was successful, print a green check
        # mark. Otherwise, print a red X.
        if [[ $Last_Command == 0 ]]; then
            prompt+="$Green[ $Checkmark "
        else
            prompt+="$Red[ $FancyX "
        fi

        [[ -n "$duration" ]] && prompt+="$duration"' '
        prompt+="]"

        # and reset the text color to the default.
        prompt+="$Reset"

        printf "$prompt"
    }

    PROMPT_COMMAND='__git_ps1 "\n\$(set_prompt) \[\e[01;36m\]\u@\h \[\e[01;37m\]\w\[\e[00m\] \[\e[01;33m\]\$(python_virtualenv)\[\e[00m\]" "\n\[\e[01;35m\]❱\[\e[00m\] "'

    if [[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] ; then
        . /usr/share/bash-completion/bash_completion

        if oc completion bash > $TMPDIR/bash_completion.sh 2> /dev/null ; then
            source $TMPDIR/bash_completion.sh
            rm $TMPDIR/bash_completion.sh
        fi

        [ -f ~/.fzf.bash ] && source ~/.fzf.bash
    fi
fi

for d in $HOME/bin ; do
    [[ -d $d ]] && export PATH=$PATH:$d
done

for d in $HOME/.go/bin ; do
    [[ -d $d ]] && export PATH=$d:$PATH
done

alias gls='git log --graph --decorate --date=relative --format="%C(yellow)%h%C(reset) %C(green)%cr%Creset %s%C(bold red)%d%C(white) [%aN]%C(reset)"'
alias gla='git log --graph --decorate --date=relative --format="%C(yellow)%h%C(reset) %C(green)%cr%Creset %s%C(bold red)%d%C(white) [%aN]%C(reset)" --all'
alias gv='git describe --tags --always --dirty'
alias grel='git log $1^..$2 --pretty=oneline --graph --decorate --no-merges'
alias gwl='git worktree list'
alias gw='git wip'
# Git clean pruned+merged branches
alias gcdb='git checkout master && git fetch --prune --all && git branch --merged | grep -v \* | xargs -r -- git branch -d'

alias doSshFS='echo sshfs -o transform_symlinks user@machine:/ ~/sshfs_mount/'
alias doScreen='echo ssh -t user@machine screen -D -RR'
alias smtpclient_test='echo gnutls-cli -V --crlf --starttls some_smtp_mailhub --port 587'
alias smtpclient_test2='echo gnutls-cli --crlf --starttls some_smtp_mailhub --port 587 --insecure'
alias dockerlogin='echo curl --insecure --user emountain https://dockerhub.wherever:5000/v2/auth'
alias bashtcp='exec 5<> /dev/tcp/myhost.com/80 ; cat <&5 & ; printf "GET / HTTP/1.0\r\n\r\n" >&5'

alias k='kubectl'
alias kg='kubectl get'
alias kgp='kubectl get pod'
alias kd='kubectl describe'
alias kdp='kubectl describe pod'
# Requires "recent" kubectl (1.10 doesn't work)
alias ksns='_ksns(){ kubectl config set-context --current --namespace=$1 } ; _ksns'
# alias ksns='_ksns(){ kubectl config set-context $(kubectl config current-context) --namespace=$1 } ; _ksns'
alias kngp='_kngp(){ kubectl get pods --field-selector=spec.nodeName=$1 --all-namespaces --no-headers -owide } ; _kngp'

alias knodeinfo="kubectl get nodes -o custom-columns='Name:metadata.name,Kernel:status.nodeInfo.kernelVersion,Kubelet:status.nodeInfo.kubeletVersion,Runtime:status.nodeInfo.containerRuntimeVersion,Distrib:status.nodeInfo.osImage,Instance:metadata.labels.beta\.kubernetes\.io/instance-type' --sort-by=.metadata.creationTimestamp"

firefox_mem_usage() {
    ps -Ao pid,pmem,comm | grep Web | grep -v Qt | awk 'BEGIN {a = 0}; {a += $2; print}; END {print a}'
}

_kube-new-worktree() {
    if [ ! -d ~/dev/go/kubernetes-$1/go/src/k8s.io/kubernetes ] ; then
        cd ~/dev/go/kubernetes/go/src/k8s.io/kubernetes && git worktree add ~/dev/go/kubernetes-$1/go/src/k8s.io/kubernetes $1
    fi
    cd ~/dev/go/kubernetes-$1/go/src/k8s.io/kubernetes
}
alias kube-new-worktree='_kube-new-worktree'

[[ -d ~/.global_npm/bin ]] && export PATH=$PATH:~/.global_npm/bin
